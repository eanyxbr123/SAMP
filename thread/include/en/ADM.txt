Hello, I would like to present include allowing encrypt file.

[php]
/**********************************************************************************************************************************
 *                                                                                                                                *
 *                                                 )(   ADM Encryption File   )(                                                  *
 *                                                                                                                                *
 * Copyright © 2018 Abyss Morgan. All rights reserved.                                                                            *
 *                                                                                                                                *
 * Website:  http://8.ct8.pl                                                                                                      *
 * Download: http://8.ct8.pl/r/download                                                                                           *
 *                                                                                                                                *
 * Plugins: SScanf                                                                                                                *
 * Modules: MD5                                                                                                                   *
 *                                                                                                                                *
 * File Version: 3.0.0                                                                                                            *
 * SScanf Version: 2.8.2                                                                                                          *
 *                                                                                                                                *
 * File Functions:                                                                                                                *
 * ADM::InvertFile(const input[],const output[]);                                                                                 *
 * ADM::HexNegativeFile(const input[],const output[],key[]);                                                                      *
 * ADM::RollXFile(const input[],const output[],key[]);                                                                            *
 * ADM::ADMx32(const input[],const output[],key[]);                                                                               *
 * ADM::ADMx64(const input[],const output[],key[]);                                                                               *
 * ADM::ADMx128(const input[],const output[],key[]);                                                                              *
 * ADM::ADMx256(const input[],const output[],key[]);                                                                              *
 * ADM::ADMx512(const input[],const output[],password[],bool:invertpassword = false);                                             *
 * ADM::MergeFile(const first_file[],const second_file[],bool:erase_second=false);                                                *
 * ADM::MergeFileGroup(const group_name[],const output[],upperbound_index,bool:erase_input=false);                                *
 * ADM::SplitFile(const input[],const output[],max_size,&upperbound_index=0);                                                     *
 *                                                                                                                                *
 * String Functions:                                                                                                              *
 * ADM::InvertString(input[],output[],maxdest = sizeof(output));                                                                  *
 * ADM::HexNegativeString(input[],output[],key[],maxdest = sizeof(output));                                                       *
 * ADM::RollXString(input[],output[],key[],maxdest = sizeof(output));                                                             *
 * ADM::ADMx32String(input[],output[],key[],maxdest = sizeof(output));                                                            *
 * ADM::ADMx64String(input[],output[],key[],maxdest = sizeof(output));                                                            *
 * ADM::ADMx128String(input[],output[],key[],maxdest = sizeof(output));                                                           *
 * ADM::ADMx256String(input[],output[],key[],maxdest = sizeof(output));                                                           *
 * ADM::ADMx512String(input[],output[],password[],bool:invertpassword = false,maxdest = sizeof(output));                          *
 * ADM::StringToHexString(input[],output[],maxdest = sizeof(output));                                                             *
 * ADM::HexStringToString(input[],output[],maxdest = sizeof(output));                                                             *
 *                                                                                                                                *
 * Dump Functions:                                                                                                                *
 * DMP::GetFreeID();                                                                                                              *
 * DMP::GetType(const name[]);                                                                                                    *
 * DMP::IsOpen(index);                                                                                                            *
 * DMP::IsValid(const name[]);                                                                                                    *
 * DMP::Create(const name[],key[],type = KEY_TYPE_ADMx32);                                                                        *
 * DMP::Destroy(index);                                                                                                           *
 * DMP::Open(const name[],key[],type = KEY_TYPE_ADMx32);                                                                          *
 * DMP::Close(index);                                                                                                             *
 * DMP::Write(index,string[]);                                                                                                    *
 * DMP::IsEmpty(const name[]);                                                                                                    *
 *                                                                                                                                *
 * Extended Functions:                                                                                                            *
 * ADM::Create(const name[]);                                                                                                     *
 * ADM::IsValidKey(key[],type);                                                                                                   *
 * ADM::GetKeyType(key[],bool:distorted = false);                                                                                 *
 * ADM::GetErrorName(code);                                                                                                       *
 * ADM::DecodeADMKey(inputkey[],outputkey[],type,maxdest = sizeof(outputkey));                                                    *
 * ADM::CreateADMKey(key[],type,maxdest = sizeof(key));                                                                           *
 *                                                                                                                                *
 * Return value:                                                                                                                  *
 * ADM_ERROR_CODE_UNEXEC       //Function unexecutable                                                                            *
 * ADM_ERROR_CODE_OK           //Success                                                                                          *
 * ADM_ERROR_CODE_INPUT        //Input file not exist                                                                             *
 * ADM_ERROR_CODE_OUTPUT       //Output file exist                                                                                *
 * ADM_ERROR_CODE_KEY          //Invalid key                                                                                      *
 * ADM_ERROR_CODE_SIZE         //Invalid file size                                                                                *
 * ADM_ERROR_CODE_DEST         //Destination size                                                                                 *
 * ADM_ERROR_CODE_OPEN_INPUT   //Open input file                                                                                  *
 * ADM_ERROR_CODE_OPEN_OUTPUT  //Open output file                                                                                 *
 * ADM_ERROR_CODE_INVALID_TYPE //Invalid key type                                                                                 *
 * ADM_ERROR_CODE_PASSWORD     //Invalid password len                                                                             *
 * ADM_ERROR_CODE_MD5          //Invalid MD5 Load                                                                                 *
 * ADM_ERROR_CODE_DMP_NAME     //Invalid dump file name                                                                           *
 * ADM_ERROR_CODE_DMP_IDX      //Invalid dump file index                                                                          *
 *                                                                                                                                *
 * Key Generator:                                                                                                                 *
 * http://8.ct8.pl/admkg                                                                                                          *
 *                                                                                                                                *
 **********************************************************************************************************************************/
[/php]

[b]Return values:[/b]
[php]
ADM_ERROR_CODE_UNEXEC       //function unexecutable
ADM_ERROR_CODE_OK           //success
ADM_ERROR_CODE_INPUT        //input file not exist
ADM_ERROR_CODE_OUTPUT       //output file exist
ADM_ERROR_CODE_KEY          //invalid key
ADM_ERROR_CODE_SIZE         //invalid file size
ADM_ERROR_CODE_DEST         //error destination size
ADM_ERROR_CODE_OPEN_INPUT   //error open input file
ADM_ERROR_CODE_OPEN_OUTPUT  //error open output file
ADM_ERROR_CODE_INVALID_TYPE //invalid key type
ADM_ERROR_CODE_PASSWORD     //invalid password length
ADM_ERROR_CODE_MD5          //invalid MD5 Load
ADM_ERROR_CODE_DMP_NAME     //invalid dump file name
ADM_ERROR_CODE_DMP_IDX      //invalid dump file index
[/php]

[b]Key types:[/b]
[php]
KEY_TYPE_UNKNOWN            //invalid key type
KEY_TYPE_HEXNEGATIVE
KEY_TYPE_ROLLX
KEY_TYPE_ADMx32
KEY_TYPE_ADMx64
KEY_TYPE_ADMx128
KEY_TYPE_ADMx256
[/php]

[b]Max key length:[/b]
[php]
MAX_KEY_LEN_HEXNEGATIVE
MAX_KEY_LEN_ROLLX
MAX_KEY_LEN_ADMx32
MAX_KEY_LEN_ADMx64
MAX_KEY_LEN_ADMx128
MAX_KEY_LEN_ADMx256
MAX_KEY_LEN_ADMx512
[/php]

[b]Example (ADMx32):[/b]
[php]
Encrypt Key: 191 12 239 86
Decrypt Key: 65 244 17 170

a - encrypt argument
b - decrypt argument

b = 256-a

256 - 191 = 65
256 - 12 = 244
256 - 239 = 17
256 - 86 = 170
[/php]

[b]Pawn Code for File:[/b]
[php]new edi;

edi = ADM::ADMx32("test.txt","test.adm","191 12 239 86");

printf("ADM return code %d",edi);
switch(edi){
	case ADM_ERROR_CODE_UNEXEC: print("Error: function unexecutable");
	case ADM_ERROR_CODE_OK: {
		print("Encryption successfully completed");
		ADM::ADMx32("test.adm","test2.txt","65 244 17 170");
	}
	default: {
		printf("%s",ADM::GetErrorName(edi));
	}
}
[/php]

[b]Screens:[/b]
[url]http://i.imgur.com/UoIa31S.png[/url]
[url]http://i.imgur.com/D2AoUeI.png[/url]
[url]http://i.imgur.com/WUh3D37.png[/url]

[b]Pawn Code for String:[/b]
[php]
new buffer[256];

ADM::ADMx32String("This is test string", buffer, "191 12 239 86");
printf("Binary data: '%s'",buffer); // 'tXÉßubv3qbĘßcČ(zV'

new buffer2[512]; //2 * sizeof(buffer)
ADM::StringToHexString(buffer,buffer2);
printf("Hex data: '%s'",buffer2); // '137458C9DF756276337162CADF7F63C8287A56'
[/php]

[b]Pawn Code for Dump File:[/b]
[php]
#define SCRIPT_DUMP_KEY	"191 12 239 86"

new GameModeLog = INVALID_DUMP_FILE,
	GameModeLogName[80];

forward WriteGameModeError(string[]);

public WriteGameModeError(string[]){
	if(!DMP::IsValid(GameModeLog)){
		GameModeLog = DMP::Create(GameModeLogName,SCRIPT_DUMP_KEY,KEY_TYPE_ADMx32); //create new dump file
	}
	if(!DMP::IsOpen(GameModeLog)){
		GameModeLog = DMP::Open(GameModeLogName,SCRIPT_DUMP_KEY,KEY_TYPE_ADMx32); //open dump file
	}
	new edi = DMP::Write(GameModeLog,string);
	DMP::Write(GameModeLog,"\n");
	if(edi == ADM_ERROR_CODE_OK) return 1;
	printf("%s",ADM::GetErrorName(edi));
	return 0;	
}

public OnGameModeInit(){ //OnFilterScriptInit
	
	new wl_date[3], wl_time[3];
	getdate(wl_date[0],wl_date[1],wl_date[2]);
	gettime(wl_time[0],wl_time[1],wl_time[2]);
	format(GameModeLogName,sizeof(GameModeLogName),"GM_%02d.%02d.%02d_%02d%02d%02d.dmp",wl_date[0],wl_date[1],wl_date[2],wl_time[0],wl_time[1],wl_time[2]);
	
	return 1;
}

public OnGameModeExit(){ //OnFilterScriptExit
	
	if(DMP::IsEmpty(GameModeLogName)){
		DMP::Close(GameModeLog);
		fremove(GameModeLogName);
	}
	
	return 1;
}
[/php]

[b]Pawn code for Split/Merge File:[/b]
[php]
new upperbound_index, edi;

edi = ADM::SplitFile("test.db","test_part",512,upperbound_index);
printf("[SplitFile] %d upp: %d",edi,upperbound_index);

edi = ADM::MergeFileGroup("test_part","new.db",upperbound_index);
printf("[MergeFileGroup] %d",edi);
[/php]

[b]Comments:[/b]
a) Max file size:
- 64 MB for SA:MP
- 16 EB for Windows application
b) File coding
- ASCII/ANSI (8 bit) for SA:MP
- Any for Windows application

[b]Download:[/b]
[url=http://8.ct8.pl/d/ADM.inc]ADM.inc[/url]
[url=http://8.ct8.pl/d/MD5.inc]MD5.inc[/url]
[url=http://8.ct8.pl/d/ADM%20Console%20Applications]ADM Console Applications[/url]
[url=http://8.ct8.pl/d/SA:MP%20Dump%20File]Dump File Open[/url]

[b]Install:[/b]
[php]
#include <MD5>
#include <ADM/ADM>
[/php]

[b]Key Generator:[/b]
[url]http://8.ct8.pl/admkg[/url]


[i][b]Non-Registered Users:[/b]
[url=http://8.ct8.pl/report/?title=ADM%20Bug]Bug Report[/url][/i]